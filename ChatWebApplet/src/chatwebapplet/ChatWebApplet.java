package chatwebapplet;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;



public class ChatWebApplet extends javax.swing.JApplet {

    private String id;

    public void init() {
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {

                public void run() {
                    initComponents();
                    System.out.println("Init Components");
                }
            });
        } catch (Exception ex) {
            receivedMessageArea.setText(ex.toString());
        }
       
        
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectButton = new javax.swing.JButton();
        serverMessagesFieldLabel = new javax.swing.JLabel();
        recievedMessageScrollPane = new javax.swing.JScrollPane();
        receivedMessageArea = new javax.swing.JTextArea();
        disconnectButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        messageToSendTextField = new javax.swing.JTextField();

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        serverMessagesFieldLabel.setText("Chatroom");

        receivedMessageArea.setEditable(false);
        receivedMessageArea.setColumns(20);
        receivedMessageArea.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        receivedMessageArea.setRows(5);
        recievedMessageScrollPane.setViewportView(receivedMessageArea);

        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        messageToSendTextField.setText("Type Message Here");
        messageToSendTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageToSendTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(recievedMessageScrollPane)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(disconnectButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(serverMessagesFieldLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(messageToSendTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton)
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverMessagesFieldLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recievedMessageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(disconnectButton)
                            .addComponent(connectButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendButton)
                    .addComponent(messageToSendTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        System.out.println("Connecting to Server");
      try {
            QueryString cmd = new QueryString("cmd", "CONNECT");
            QueryString nameQuery = new QueryString("name",messageToSendTextField.getText());
            URL url;
            URLConnection urlConnection;
            String address = "http://localhost:8080/ChatWebApp/Controller";
            url = new URL(address + "?" + cmd + "&" + nameQuery);
            urlConnection = url.openConnection();
            InputStream in = urlConnection.getInputStream();
            InputStreamReader r = new InputStreamReader(in);
            int c;
            String answer = "";
            while ((c = r.read()) != -1) {
                answer += (char)c;
            }
            // WHAT DO WE DO WITH ANSWER? --> we make it the id
             id = answer;
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnknownHostException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        }
      System.out.println("Connected to Server");
      // So we are always recieving
      RecieveThread reciever = new RecieveThread(this);
      reciever.start();
      System.out.println("Reciever Running");
        
}//GEN-LAST:event_connectButtonActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
       System.out.println("Disconnecting to Server");
        try {
            QueryString cmd = new QueryString("cmd", "DISCONNECT");
            QueryString idQuery = new QueryString("id",id);
            URL url;
            URLConnection urlConnection;
            String address = "http://localhost:8080/ChatWebApp/Controller";
            url = new URL(address + "?" + cmd + "&" + idQuery);
            urlConnection = url.openConnection();
            InputStream in = urlConnection.getInputStream();
            InputStreamReader r = new InputStreamReader(in);
            int c;
            String answer = "";
            while ((c = r.read()) != -1) {
                answer += (char)c;
            }
            // WHAT DO WE DO WITH ANSWER?  --> make sure it was all good
            if (!answer.equals("Disconnect request confirmed")) {
                try {
                    throw new Exception();
                } catch (Exception ex) {
                    Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnknownHostException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        }
         System.out.println("Disconnecting from Server");
        
}//GEN-LAST:event_disconnectButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        System.out.println("About to Send Message");
         try {
            QueryString cmd = new QueryString("cmd", "SEND");
            QueryString messageQuery = new QueryString("message",messageToSendTextField.getText());
            QueryString idQuery = new QueryString("id",id);
            URL url;
            URLConnection urlConnection;
            String address = "http://localhost:8080/ChatWebApp/Controller";
            url = new URL(address + "?" + cmd + "&" + idQuery + "&" + messageQuery);
            urlConnection = url.openConnection();
            InputStream in = urlConnection.getInputStream();
            InputStreamReader r = new InputStreamReader(in);
            int c;
            String answer = "";
            while ((c = r.read()) != -1) {
                answer += (char)c;
            }
            // WHAT DO WE DO WITH ANSWER? --> check to make sure it went through
            if (!answer.equals("Sent")) {
                try {
                    throw new Exception();
                } catch (Exception ex) {
                    Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnknownHostException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        }
          System.out.println("Sent Message");
        
    }//GEN-LAST:event_sendButtonActionPerformed

    protected void recieve() {
           try {
            QueryString cmd = new QueryString("cmd", "RECIEVE");
            QueryString idQuery = new QueryString("id",id);
            URL url;
            URLConnection urlConnection;
            String address = "http://localhost:8080/ChatWebApp/Controller";
            url = new URL(address + "?" + cmd + "&" + idQuery);
            urlConnection = url.openConnection();
            InputStream in = urlConnection.getInputStream();
            InputStreamReader r = new InputStreamReader(in);
            int c;
            String answer = "";
            while ((c = r.read()) != -1) {
                answer += (char)c;
            }
            // WHAT DO WE DO WITH ANSWER? --> append messages to window
            receivedMessageArea.append(answer);
            // Will this create a new line with /n? or do we need to parse
            // and say if we see a /n, then append the previous?
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnknownHostException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChatWebApplet.class.getName()).log(Level.SEVERE, null, ex);
        }
            System.out.println("Recieving");
    }
    
    private void messageToSendTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageToSendTextFieldActionPerformed
       
    }//GEN-LAST:event_messageToSendTextFieldActionPerformed

    public void stop() {
        disconnectButtonActionPerformed(null);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField messageToSendTextField;
    private javax.swing.JTextArea receivedMessageArea;
    private javax.swing.JScrollPane recievedMessageScrollPane;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel serverMessagesFieldLabel;
    // End of variables declaration//GEN-END:variables
}
